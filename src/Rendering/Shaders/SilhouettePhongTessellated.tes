#version 430 core

struct PhongPatch
{
	float termIJ;
	float termJK;
	float termIK;
};

layout(triangles, fractional_odd_spacing, ccw) in;

in vec3 tcPosition[];
in vec2 tcTexCoord[];
in vec3 tcNormal[];
in PhongPatch tcPhongPatch[];

out vec3 teFragPos;	// vertex position in world space
out vec3 tePosition; // vertex position in model space
out vec2 teTexCoord;
out vec3 teNormal;

patch in int silhouetteUV;
patch in int silhouetteVW;
patch in int silhouetteWU;

uniform mat4 modelMat;
uniform mat4 viewMat;
uniform mat4 projMat;
uniform mat4 projViewMat;
uniform mat4 normalMat;

uniform bool hasDispMap;
uniform sampler2D dispMap;
uniform float magnitude;

void main()
{
	// Squared tesscoords
	vec3 tcSq = gl_TessCoord * gl_TessCoord;

	vec3 p0 = gl_TessCoord.x * tcPosition[0];
	vec3 p1 = gl_TessCoord.y * tcPosition[1];
	vec3 p2 = gl_TessCoord.z * tcPosition[2];
	vec3 pos = p0 + p1 + p2;
	
	vec3 n0 = gl_TessCoord.x * tcNormal[0];
	vec3 n1 = gl_TessCoord.y * tcNormal[1];
	vec3 n2 = gl_TessCoord.z * tcNormal[2];
	vec3 normal = n0 + n1 + n2;
	
	vec2 tc0 = gl_TessCoord.x * tcTexCoord[0];
	vec2 tc1 = gl_TessCoord.y * tcTexCoord[1];
	vec2 tc2 = gl_TessCoord.z * tcTexCoord[2];
	teTexCoord = tc0 + tc1 + tc2;

	// build terms
	vec3 termIJ = vec3(tcPhongPatch[0].termIJ,
	                   tcPhongPatch[1].termIJ,
	                   tcPhongPatch[2].termIJ);

	vec3 termJK = vec3(tcPhongPatch[0].termJK,
	                   tcPhongPatch[1].termJK,
	                   tcPhongPatch[2].termJK);

	vec3 termIK = vec3(tcPhongPatch[0].termIK,
	                   tcPhongPatch[1].termIK,
	                   tcPhongPatch[2].termIK);

	// phong tessellated position
	vec3 phongPos	= tcSq[0] * tcPosition[0]
					+ tcSq[1] * tcPosition[1]
					+ tcSq[2] * tcPosition[2]
					+ gl_TessCoord[0] * gl_TessCoord[1] * termIJ
					+ gl_TessCoord[1] * gl_TessCoord[2] * termJK
					+ gl_TessCoord[2] * gl_TessCoord[0] * termIK;

	// EXPERIMENT AREA WOO //

	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;
	
	// METHOD 1

	float phongAmount = 0.0;

	if(silhouetteUV == 1)
	{
		float phongAmountUV = u + v - w;
		if(u == 0 || v == 0)
		{
			phongAmountUV = 0;
		}
		phongAmount = max(phongAmount, phongAmountUV);
	}
	if(silhouetteVW == 1)
	{
		float phongAmountVW = v + w - u;
		if(v == 0 || w == 0)
		{
			phongAmountVW = 0;
		}
		phongAmount = max(phongAmount, phongAmountVW);
	}
	if(silhouetteWU == 1)
	{
		float phongAmountWU = w + u - v;
		if(w == 0 || u == 0)
		{
			phongAmountWU = 0;
		}
		phongAmount = max(phongAmount, phongAmountWU);
	}

	phongAmount *= 0.6;

	//////////////

	// METHOD 2

	phongAmount = 1.0;
	float distanceFromEdge = 0.1;

	if(silhouetteUV == 0 && w <= distanceFromEdge)
	{
		phongAmount *= w * (1 / distanceFromEdge);
	}
	if(silhouetteVW == 0 && u <= distanceFromEdge)
	{
		phongAmount *= u * (1 / distanceFromEdge);
	}
	if(silhouetteWU == 0 && v <= distanceFromEdge)
	{
		phongAmount *= v * (1 / distanceFromEdge);
	}

	phongAmount *= 0.4;

	// EXPERIMENT AREA END //

	pos = (phongAmount * phongPos) + ((1 - phongAmount) * pos);	// @TODO: vec3 finalPos = (1.0-uTessAlpha)*barPos + uTessAlpha*phongPos; 

	float height;
	if(hasDispMap)
	{
		height = texture(dispMap, teTexCoord).x;
	}
	else
	{
		height = 0.0f;
	}
	//pos += normal * height * magnitude;

	teFragPos = pos;
	gl_Position = projViewMat * vec4(teFragPos, 1);

	tePosition = (viewMat * vec4(teFragPos, 1)).xyz;
	teNormal = (transpose(inverse(viewMat)) * vec4(normal, 0)).xyz;
}